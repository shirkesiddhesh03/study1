1. Path Interface (java.nio.file.Path):
Represents the path to a file or directory in the file system.
Provides methods for manipulating paths, such as resolving, relativizing, and comparing paths.
Path filePath= Paths.get("example/txt")

2. Paths Class (java.nio.file.Paths):
Contains static factory methods for creating Path instances.
Useful for converting strings or URIs to Path objects.
Path filePath= Paths.get("example/txt")

3. Files Class (java.nio.file.Files):
Provides static methods for performing file and directory operations.
Includes methods for creating, copying, moving, deleting, and reading/writing files.
Offers methods for querying file attributes, such as checking file existence, getting file size, and checking file types.

Files.exists(filePath);
Files.createFile(filePath);
Files.write(filePath, content.getBytes());
Files.readAllBytes(filePath)
Files.delete(filePath);

Files.createDirectory(dirPath);
// List contents of a directory
        try (DirectoryStream<Path> directoryStream = Files.newDirectoryStream(dirPath)) {
            System.out.println("Contents of directory:");
            for (Path path : directoryStream) {
                System.out.println(path.getFileName());
            }

4. FileSystem Interface (java.nio.file.FileSystem):
Represents a file system.
Provides methods for obtaining information about the file system, such as its root directories and supported file attribute views.

5. FileSystems Class (java.nio.file.FileSystems):
Contains static factory methods for obtaining instances of FileSystem.
Useful for obtaining the default file system or creating file systems for specific URI schemes.

6.FileStore Interface (java.nio.file.FileStore):
Represents a storage pool, device, partition, volume, concrete file system, or other implementation-specific means of file storage.
Provides methods for querying information about the file store, such as its total space, available space, and supported file attribute views.

6. FileVisitResult Enum (java.nio.file.FileVisitResult):
Enumerates the possible results of a file tree traversal performed by the Files.walkFileTree() method.
Includes values indicating whether to continue, skip, or terminate the traversal

Eg. 

 public static void main(String[] args) {
        // Create a Path object representing a file or directory
        Path filePath = Paths.get("example.txt");

        // Check if the file exists
        boolean exists = Files.exists(filePath);
        System.out.println("File exists: " + exists);

        // Create a new file
        try {
            Files.createFile(filePath);
            System.out.println("File created successfully.");
        } catch (Exception e) {
            System.out.println("Error creating file: " + e.getMessage());
        }

        // Write content to the file
        String content = "Hello, Java FileSystem!";
        try {
            Files.write(filePath, content.getBytes());
            System.out.println("Content written to file.");
        } catch (Exception e) {
            System.out.println("Error writing to file: " + e.getMessage());
        }

        // Read content from the file
        try {
            String fileContent = new String(Files.readAllBytes(filePath));
            System.out.println("File content: " + fileContent);
        } catch (Exception e) {
            System.out.println("Error reading from file: " + e.getMessage());
        }

        // Delete the file
        try {
            Files.delete(filePath);
            System.out.println("File deleted successfully.");
        } catch (Exception e) {
            System.out.println("Error deleting file: " + e.getMessage());
        }
    }





