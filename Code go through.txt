We have three we services in BSC
1. saveOffer
2. deleteOffer
2. getLog
==================================================================
GET (Request Data): data is sent in header -- exposed to URL ---- can be bookmarked 
POST (submit Data): Data is sent in body -- data is not exposed to URL -- can't be bookmarked.

GET request is idempotent:
It means second request will be ignored until response of first request is delivered 

POST request is non-idempotent.

===================================================================================================
							SERVLET
<load-on-startup>1</load-on-startup>: this means servlet will be load when application gets deployed, its helps to respond to the first request to servlet quickly because its already loaded.

ServletConfig: it is for a specific servlet
ServletContext: it is for all servlets available in web application.

=======================================================================================================================================================================================
Unmarshalling: converting XML data into executable java objects
JAXB is used in eclipse to generate java classes from XML schema XSD

Apache maven > built in feature -> converts xsd into jaxb classes

=============================================================================================================================================================
									Logger
We use debugging tool  called log4j
provided by Apache --> open source
need to add jar file ---only used of java application
org.apache.log4j

Components

logger: responsible for capturing the logging info
logger accepts the request generated by the log statements

Logger has three layers: 
Logger Defination - Appender - Layout

Syntax: 
Logger log = Logger.getLoger(className)
eg.
class A
{
	Logger log= Logger.getLogger(A.class);
}


We use following methods to print the status of our application 
debugg()---lowest priority
info()
warn()
error()
fetal()----Highest priority

priority: debug<info<error<warn<fetal


Appender: It is use to write the message (logs)
--------------------------------------------------
File Appender: writes logs in file
Console Appender: writes logs on console
JdbcAppender(): for database
SMPTPAppender(): for mails
SocketAppender():


Layout: Destiny to store the messages by Appender 
(Specifies the format in which log  statements will be written in destination repository)

Types of layout;
Simple Layout
Pattern Layout 
HTML Layout
XML Layout

==========================================================================================================================================================
@ResponseBody: it tells controller serialize response in JSON format

==========================================================================================================================================================
Interface OfferService //(OfferServiceImpl impements this interface)
{
	public int handleDeleteOffer(String offerNumber, boolean softDelete);
}													


Interface OfferLocationDao //(OfferLocationDaoImpl impements this interface)
{
	public int softDeleteOffer(String offerNumber);
}











































