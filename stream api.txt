Stream is an interface
generally stream api is used to work with collection

eg.
List<Integer> list1=List.of(2,4,50,12,34,1,3);

//Using Stream api to find out even numbers
List<Integer> newList=list1.stream().filter(i->i%2==0).collect(Collectors.toList);

//Using Stream api to find out numbers greater than 10
List<Integer> newList=list1.stream().filter(i->i>10).collect(Collectors.toList);
______________________________________________________________________________________________________________
HOW TO GET OBJECT OF Stream Interface

//1. blank
Stream<Object> emptyStream =Stream.empty();

//2. using array, collection
String names[]={"Siddhesh","Ramesh","Durgesh"};
Stream<String> stream1=stream.of(names);
stream1.forEach(e->{System.out.println(e)});

//3. using builder 
Stream<Object> stream1=Stream.builder().build();

------------------------------------------------------------------------------------------------
List<Integer> list1=new ArrayList<Integer>();
list1.add(2);
list1.add(4);
list1.add(2);
list1.add(1);
list1.add(8);

Stream<Integer> stream1=list1.stream();
stream1.forEach(e->{System.out.println(e)});
______________________________________________________________________________________________________________
METHODS OF Stream

1. filter(): it filters out the elements based on the given predicate.
			eg. to find names start with "A"
			List<String> list1=List.of("Aman","Amar","Durga");
			List<String> list2=list1.stream().filter(e->e.startsWith("A")).collect(Collectors.toList);
			Sysout(list2);
			
2. map(): We can perform operation on each elements.
			eg. to find out square of given numbers.
			List<Integer> list1=List.of(1,2,3,4,5,6);
			List<Integer> list2=list1.stream().map(i->i*i).collect(Collectors.toList);
			Sysout(list2)

3. forEach(): It iterates through all elements
			eg.
			List<String> list1=List.of("Aman","Amar","Durga");
			list1.stream().forEach(
									e->{System.out.println(e)}
									);
									
4. sorted(): it sorts the elements in ascending order.
			eg. 
				Map<String, String> map1=new HashMap<String, String>();
				map1.put("fname","Siddhesh");
				map1.put("lname","shirke");
				map1.put("age","23");
				
				Set<String> set=new HashSet<>(map1.keySet());
				System.out.println(set.stream().sorted().collect(Collectors.toList()));
				OR 
				set.stream().sorted().forEach(System.out::println);
				
5. distinct(): It returns unique elements
			eg. 
				String[] r={"a","b","c","c"};
				Arrays.stream(r).distinct().forEach(System.out::println);
				
_________________________________________________________________________________________________________________________________________________________
// empID Name deptID status salary

List<Employee> empList=new ArrayList<>();
empList.add(new Employee(101,"A",101,"active", 2000));
empList.add(new Employee(102,"B",101,"active", 5000));
empList.add(new Employee(103,"C",102,"inactive", 6000));
empList.add(new Employee(104,"D",102,"inactive", 4000));
empList.add(new Employee(105,"E",103,"active", 3000));
empList.add(new Employee(106,"F",103,"active", 3500));
empList.add(new Employee(107,"G",104,"inactive", 3500));

//Print employee based on dept (group by dept)
Map<Integer, List<Employee>> empListBasedOnDept=empList.stream().collect(Collectors.groupingBy(Employee::getDept, Collectors.toList()));

empListBasedOnDept.entrySet().forEach()(entry->{
	System.out.println(entry.getKey()+"- "+entry.getValue());
	});
------------------------------------------------------------------------------------------------------------------------------------------------------

//Print count of empoyees work in each dept
Map<Integer, long> empCountBasedOnDept=empList.stream().collect(Collectors.groupingBy(Employee::getDept, Collectors.counting()));

empCountBasedOnDept.entrySet().forEach()(entry->{
	System.out.println("Dept: "+entry.getKey()+"- "+"Employee count: "+entry.getValue());
	});

-----------------------------------------------------------------------------------------------------------------------------------------------------
//Print active/inactive employees

long activeEmpCount=empList.stream().filter(e-> "active'.equals(e.getStatus())).count();
long inAtiveEmpCount=empList.stream().filter(e-> "inactive'.equals(e.getStatus())).count();
-----------------------------------------------------------------------------------------------------------------------------------------------------
//Print empoyee who has highest/lowest salary

empList.stream().max(Comparator.comparing(Employee::getSalary));
empList.stream().min(Comparator.comparing(Employee::getSalary));























