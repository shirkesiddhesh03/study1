List<Integer> numbers= Arrays.asList(71, 18, 42, 21, 67, 32, 95, 14, 56, 87);
		//FIND ODD AND EVEN NUMBERS
		
		System.out.println("even number");
		numbers.stream().filter(n-> n%2==0).forEach(System.out::println);
		System.out.println("odd number");
		numbers.stream().filter(n-> n%2!=0).forEach(System.out::println);
		//=-=-==-=-=--=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
		
		//REVERSE ORDER OF LIST
		System.out.println("reverse order of number");
		String sorted=numbers.stream().sorted(Comparator.reverseOrder()).map(Object::toString).collect(Collectors.joining(", "));
		 System.out.println(sorted);
		
		//=-=-==-=-=--=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
		 
		 System.out.println("MAX: "+ numbers.stream().max(Integer::compare).get());
		 
		//=-=-==-=-=--=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
		
		//	COUNT FREQUESNCY OF CHARACTERS IN STRING
		String str= "Java Concept Of The Day";
		str=str.replace(" ", "");
		 Map<Character, Long> charCountMap = str.chars().mapToObj(c -> (char) c)
				 .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
		 
		//=-=-==-=-=--=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
		 
		 
		 Map<String, Long> map1=Stream.of(str.split("")).collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
		 String firstDuplicate= map1.entrySet().stream().filter(e->e.getValue()>1).map(e->e.getKey()).findFirst().get();
		 Long occurance= map1.entrySet().stream().filter(e->e.getValue()>1).map(e->e.getValue()).findFirst().get();
		 System.out.println("first duplicate: "+ firstDuplicate+ " occurances: "+occurance);
		 
		 
		//=-=-==-=-=--=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
		 
		 List<String> s1=Arrays.asList("Sid","Ass");
		 List<String> s2=Arrays.asList("Ank","Lahu");
		 
		 Stream.concat(s1.stream(), s2.stream()).forEach(System.out::print);
		//=-=-==-=-=--=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

		// ✅ 1. Highest-paid employee per department
        Map<String, Optional<Employee>> highestPaid = employees.stream()
            .collect(Collectors.groupingBy(
                e -> e.department,
                Collectors.maxBy(comparingDouble(e -> e.salary))
            ));

        // ✅ 2. Total salary expenditure per department
        Map<String, Double> totalSalary = employees.stream()
            .collect(Collectors.groupingBy(
                e -> e.department,
                Collectors.summingDouble(e -> e.salary)
            ));

-=-=---=-=-=-=-=-=-==-=--=-=-=--=-=-=-=-=-=-=--=-=---=-=-=-=-=-=-==-=--=-=-=--=-=-=-=-=-=-=-
Q. Find the longest string in a list of strings using Java streams:

List<String> strings = Arrays
              .asList("apple", "banana", "cherry", "date", "grapefruit");
Optional<String> longestString = strings
              .stream()
              .max(Comparator.comparingInt(String::length));


Q. Calculate the average age of a list of Person objects using Java streams:

List<Person> persons = Arrays.asList(
    new Person("Alice", 25),
    new Person("Bob", 30),
    new Person("Charlie", 35)
);
double averageAge = persons.stream()
                          .mapToInt(Person::getAge)
                          .average()
                          .orElse(0);


Q. Check if a list of integers contains a prime number using Java streams:

public boolean isPrime(int number) {
  if (number <= 1) {
    return false;
  }
  for (int i = 2; i <= Math.sqrt(number); i++) {
    if (number % i == 0) {
        return false;
    }
  }
  return true;
}
 
private void printPrime() {
  List<Integer> numbers = Arrays.asList(2, 4, 6, 8, 10, 11, 12, 13, 14, 15);
  boolean containsPrime = numbers.stream()
                                 .anyMatch(this::isPrime);
  System.out.println("List contains a prime number: " + containsPrime);

 }


Q. Merge two sorted lists into a single sorted list using Java streams:

List<Integer> list1 = Arrays.asList(1, 3, 5, 7, 9);
List<Integer> list2 = Arrays.asList(2, 4, 6, 8, 10);
List<Integer> mergedList = Stream.concat(list1.stream(), list2.stream())
                                .sorted()
                                .collect(Collectors.toList());


Q. Find the intersection of two lists using Java streams:

Get Mehar Chand’s stories in your inbox
Join Medium for free to get updates from this writer.

Enter your email
Subscribe
List<Integer> list1 = Arrays.asList(1, 2, 3, 4, 5);
List<Integer> list2 = Arrays.asList(3, 4, 5, 6, 7);
List<Integer> intersection = list1.stream()
                                  .filter(list2::contains)
                                  .collect(Collectors.toList());


Q. Remove duplicates from a list while preserving the order using Java streams:

List<Integer> numbersWithDuplicates = Arrays.asList(1, 2, 3, 2, 4, 1, 5, 6, 5);
List<Integer> uniqueNumbers = numbersWithDuplicates
                                       .stream()
                                       .distinct()
                                       .collect(Collectors.toList());


Q. Given a list of transactions, find the sum of transaction amounts for each day using Java streams:

List<Transaction> transactions = Arrays.asList(
    new Transaction("2022-01-01", 100),
    new Transaction("2022-01-01", 200),
    new Transaction("2022-01-02", 300),
    new Transaction("2022-01-02", 400),
    new Transaction("2022-01-03", 500)
);

Map<String, Integer> sumByDay = transactions
                        .stream()
                        .collect(Collectors.groupingBy(Transaction::getDate,
                               Collectors.summingInt(Transaction::getAmount)));


Q. Find the kth smallest element in an array using Java streams:

int[] array = {4, 2, 7, 1, 5, 3, 6};
int k = 3; // Find the 3rd smallest element
int kthSmallest = Arrays.stream(array)
                       .sorted()
                       .skip(k - 1)
                       .findFirst()
                       .orElse(-1);


Q. Given a list of strings, find the frequency of each word using Java streams:

List<String> words = Arrays.asList("apple", "banana", "apple", "cherry", 
                                    "banana", "apple");
Map<String, Long> wordFrequency = words
              .stream()
              .collect(Collectors
                    .groupingBy(Function.identity(), Collectors.counting())
                );


Q. Implement a method to partition a list into two groups based on a predicate using Java streams:

List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);
Map<Boolean, List<Integer>> partitioned = numbers
                        .stream()
                        .collect(Collectors.partitioningBy(n -> n % 2 == 0));
List<Integer> evenNumbers = partitioned.get(true);
List<Integer> oddNumbers = partitioned.get(false);
System.out.println("Even numbers: " + evenNumbers);
System.out.println("Odd numbers: " + oddNumbers);
