1) what is @Component, @Service, @Repository
-> https://www.baeldung.com/spring-component-annotation

2)What is Interceptor
->
You can use the Interceptor in Spring Boot to perform operations under the following situations −
	- Before sending the request to the controller
	- Before sending the response to the client
For example, you can use an interceptor to add the request header before sending the request to the controller and add the response header before sending the response to the client.
To work with interceptor, you need to create @Component class that supports it and it should implement the HandlerInterceptor interface.
The following are the three methods you should know about while working on Interceptors −
	- preHandle() method − This is used to perform operations before sending the request to the controller. This method should return true to return the response 
                                                                   to the client.
	- postHandle() method − This is used to perform operations before sending the response to the client.
	- afterCompletion() method − This is used to perform operations after completing the request and response.

3) Profiles in spring boot
-> Spring Boot profiles group parts of the application configuration and make it be available only in certain environments
	application-dev.properties
	application-prod.properties
	application.properties
- In "application.properties" We use the "spring.profiles.active" to set active profiles. Eg. spring.profiles.active=local


4) how to make list immuatble
-> Collections.unmodifiableList(list);
   Collections.unmodifiableSet(set);
   Collections.unmodifiableMap(map);

5) @SpringBootApplication
-> combination of @ComponentScan, @EnableAutoConfiguration and @Confuguration

6) Spring Boot auto-configuration
-> Spring Boot auto-configuration attempts to automatically configure your Spring application based on the jar dependencies that you have added

7) Exception handling in Spring boot
-> 
- The @ControllerAdvice is an annotation, to handle the exceptions globally.
- The @ExceptionHandler is an annotation used to handle the specific exceptions and sending the custom responses to the client.
- check url for more details: https://www.tutorialspoint.com/spring_boot/spring_boot_exception_handling.htm

8) Difference between POST and PUT
->
POST is not idempotent. It is used to create new resource.
PUT is idempotent, meaning calling it once or multiple times successively has the same effect, and it typically replaces the entire resource
PUT's best used when ou are updating or replacing existing data.

9) slf4j
10) Difference between authorization and authentication
11) Difference between @Qualifier & @Primary
12) double locking singleton java
13) diamond problem in java
14) if interface A and B have same method and class C is implemting both interfaces then can we override those methods?
15) what is thread pool
14) why we use join() in multithreading
15) Volatile keyword in java
16) what is parallel stream 
17) Types of garbage collector

18) @Async
-> In Java, the @Async annotation is part of the Spring Framework's concurrency support. When you annotate a method with @Async,
Spring will execute that method asynchronously in a separate thread pool. This is particularly useful for offloading tasks that
are potentially time-consuming or I/O-bound, allowing the main thread to continue processing other tasks without waiting for the
asynchronous method to complete.

Here's how you typically use the @Async annotation:

*1* Enable Async Support:
Before using @Async, you need to enable async support in your Spring application. You can do this by adding the @EnableAsync annotation
to a configuration class. 
Eg.
@Configuration
@EnableAsync
public class AppConfig {
    // Other configurations
}

*2* Annotate Methods:
Once async support is enabled, you can annotate methods with @Async to indicate that they should be executed asynchronously.
The method annotated with @Async can have a return type of void, Future<T>, or CompletableFuture<T>, where T is the type of
the result returned by the asynchronous method.
Eg. 

@Service
public class MyService {
    @Async
    public CompletableFuture<String> asyncMethod() {
        // Perform asynchronous tasks here
    }
}

19) @Transactional
-> The @Transactional annotation is used in the Spring Framework to demarcate transaction boundaries around methods. Transactions ensure the 
   atomicity, consistency, isolation, and durability (ACID) properties of database operations.
- You can apply the @Transactional annotation to either individual methods or entire classes. When applied at the class level, it applies to all 
  public methods of that class.
- The @Transactional annotation allows you to control various aspects of transactional behavior, such as isolation level, timeout, rollback 
  rules, etc., through its attributes.

*Transaction Propagation:
- By default, the @Transactional annotation applies the Propagation.REQUIRED propagation behavior, which means that if a transaction already 
  exists, the method will join that transaction. If no transaction exists, a new one will be created.
- You can customize the propagation behavior using the propagation attribute of @Transactional.

*Exception Handling:
- By default, Spring will rollback the transaction for any unchecked exception (RuntimeException or its subclasses) that occurs during the 
  method execution. You can customize the rollback behavior using the rollbackFor and noRollbackFor attributes of @Transactional

Eg.
@Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.READ_COMMITTED, timeout = 30, rollbackFor = Exception.class)

20) Lazy fetching vs Eager fetching in Hibernate
->- Lazy fetching means that associated objects are not loaded from the database until they are explicitly accessed by the application.
  - Eager fetching means that associated objects are loaded from the database at the same time as the parent object.

  - Lazy fetching can help improve performance by avoiding the unnecessary loading of associated objects if they are not always needed.
  - eager fetching can lead to performance issues if the associated objects are large in number or if they are not always needed, as it may 
   result in loading unnecessary data.
Eg. 
@OneToMany(mappedBy = "parent", fetch = FetchType.LAZY)
private List<Child> children;

@OneToMany(mappedBy = "parent", fetch = FetchType.EAGER)
private List<Child> children;

21) difference between young generation and old generation memory space in java



