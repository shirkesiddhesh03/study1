1. Why do we use hibernate over JDBC
-> a. Hibernate is the orm tool. That means, it maps object classes i.e. entity to our database without creating new table.
      Whereas in JDBC we write sql queries for tables not for entity.

   b. JDBC is database dependent. So, if in future database gets changed then we need to change queries too.
	  whereas in hibernate we can use HQL which is database indpendent. The dialect property in hibernate confg file helps to convert HQL to database specific queries.
	
   c. In JDBC we have to handle checked exceptions ie. we need to write database operations in try catch block.
      Whereas in hibernate we dont need to handle the checked exceptions, it automatically converts checked exceptions into runtime exception.
	
2. Session Factory vs Session, why should we use Session Factory in Session?
-> a. Session Factory is heavy weight object whereas Session is light weight object.
   b. Session Factory is thread safe whereas Session is not thread safe.
   c. Session Factory provides Session object which we further use to perform crud operations.
	
3. In which scenario should we use multiple SessionFactory objects?
-> If we have multiple databases then we need to use multiple SessionFactory objects

4. what is persistence context?
-> persistence context is nothing but the session. it works as a cache (1st Level), keeps track of entity state and only does commit once we done changing the object.

5. What is a transient state in JPA/ Hibernate?
-> When an entity object is not mapped to the session then state of that object becomes transient.

6. What is a detached state in JPA/ Hibernate?
-> When session realses the entity object then state of that object becomes detached.
	we can achieve this by session.close().
	we can achieve this without closing the session- session.evect(object) or session.detach(object)
	
7. session.contains(object)
-> it check if persistence context contains the specified object or not, ie. it returns true if object is in persistence state.

8. What is connection pool?
-> Connection pool is the container which holds connection object. it is store on the server side.

9. How to implement connection pooling?
-> there are multiple vendors like dbcp of Apache, cp3o, Hikari (default for Spring Boot) 
   Datasource interface maintains the connection pool.
   DriverManagger is the datasource for JDBC.
   
10. What is @GeneratedValue in hibernate?  
-> It is the mathod to generate primary key.
	Auto: it means hibernate will take care of primary key generation.
	Identity: it means database will generate the primary key
	sequence: primary key will be generated by specified sequence eg. 2,4,6,8 (next value is getting increased by 2)
	
11. What is the @NamedQuery in hibernate/ JPA and what are the advantages?
->  We should write this annotation on the top of the class.
    @NamedQuery(name="myapp", query="from student")
	Note: here we would write above line on the top of the Student class.
	
	how to execute named query-> session.NamedQuery("myapp", Student.class);
	
	NOTE: We can't use maultiple @NamedQuery annotations on top of the same entity/class, that is why whe have
		  @NamedQueries annotation
		  Syntax: @NamedQueries(value={@NamedQuery(name="myapp", query="from student"),
									   @NamedQuery(name="myapp1", query="from student s where s.id=30")})
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	